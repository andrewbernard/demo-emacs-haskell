* =src/Main.hs=
  #+BEGIN_SRC haskell
    module Main where

    import System.Environment (getArgs)
    import System.Exit

    import Demo.List

    main :: IO ()
    main = do
      args <- getArgs
      case args of
        "car":xs ->
          case car (fromList xs) of
            Nothing -> putStrLn ""
            Just a -> putStrLn a
        _ -> do
          putStrLn "Usage: demo-list <car|cdr> [text]..."
          exitFailure
  #+END_SRC

* =src/Demo/List.hs=
  #+BEGIN_SRC haskell
    {-# LANGUAGE DeriveFoldable #-}
    module Demo.List where

    data List a = Cons a (List a) | Nil
      deriving (Eq, Foldable, Show)

    -- | Returns the first element, if non-empty.
    --
    -- >>> car Nil
    -- Nothing
    --
    -- >>> car (Cons 'a' Nil)
    -- Just 'a'
    car :: List a -> Maybe a
    car xs = case xs of
      Nil      -> Nothing
      Cons x _ -> Just x

    cdr :: List a -> List a
    cdr Nil = Nil
    cdr (Cons _ xs) = xs

    fromList =
      foldr Cons Nil
  #+END_SRC

* =test/Demo/ListSpec.hs=
  #+BEGIN_SRC haskell
    {-# LANGUAGE TypeApplications #-}

    module Demo.ListSpec where

    import Test.Hspec

    import Demo.List

    main = hspec spec

    spec = parallel $ do
      describe "List" $ do
        describe "cdr" $ do
          it "returns the tail" $ do
            let xs = Cons 'b' (Cons 'c' Nil)
            cdr (Cons 'a' xs) `shouldBe` xs

          it "returns Nil for empty lists" $
            cdr Nil `shouldBe` Nil @Char
  #+END_SRC
